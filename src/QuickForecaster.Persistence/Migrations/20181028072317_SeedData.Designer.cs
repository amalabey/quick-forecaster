// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuickForecaster.Persistence;

namespace QuickForecaster.Persistence.Migrations
{
    [DbContext(typeof(QuickForecasterDbContext))]
    [Migration("20181028072317_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("QuickForecaster.Domain.Entities.BacklogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Confidence")
                        .IsRequired();

                    b.Property<int?>("EstimateId");

                    b.Property<decimal>("OptimisticEstimate");

                    b.Property<decimal>("PessimisticEstimate");

                    b.Property<string>("Task");

                    b.HasKey("Id");

                    b.HasIndex("EstimateId");

                    b.ToTable("BacklogItems");

                    b.HasData(
                        new { Id = 1, Confidence = "High", EstimateId = 1, OptimisticEstimate = 4.0m, PessimisticEstimate = 6.0m, Task = "Create database schema" },
                        new { Id = 2, Confidence = "Medium", EstimateId = 1, OptimisticEstimate = 10.0m, PessimisticEstimate = 16.0m, Task = "Create CI/CD pipeline" },
                        new { Id = 3, Confidence = "Low", EstimateId = 1, OptimisticEstimate = 8.0m, PessimisticEstimate = 10.0m, Task = "Create service layer" },
                        new { Id = 4, Confidence = "High", EstimateId = 1, OptimisticEstimate = 5.0m, PessimisticEstimate = 10.0m, Task = "Setup dev environment" },
                        new { Id = 5, Confidence = "High", EstimateId = 1, OptimisticEstimate = 15.0m, PessimisticEstimate = 30.0m, Task = "Acceptance testing" },
                        new { Id = 6, Confidence = "High", EstimateId = 2, OptimisticEstimate = 4.0m, PessimisticEstimate = 6.0m, Task = "Create home page" },
                        new { Id = 7, Confidence = "Medium", EstimateId = 2, OptimisticEstimate = 10.0m, PessimisticEstimate = 16.0m, Task = "Create contact-us page" },
                        new { Id = 8, Confidence = "Low", EstimateId = 2, OptimisticEstimate = 8.0m, PessimisticEstimate = 10.0m, Task = "Browser testing" },
                        new { Id = 9, Confidence = "High", EstimateId = 2, OptimisticEstimate = 5.0m, PessimisticEstimate = 10.0m, Task = "Client demo" },
                        new { Id = 10, Confidence = "High", EstimateId = 3, OptimisticEstimate = 15.0m, PessimisticEstimate = 30.0m, Task = "Document deployment guide" }
                    );
                });

            modelBuilder.Entity("QuickForecaster.Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new { Id = 1, Name = "Contoso" },
                        new { Id = 2, Name = "Fabrikam" },
                        new { Id = 3, Name = "Wingtip" },
                        new { Id = 4, Name = "MyDrive" }
                    );
                });

            modelBuilder.Entity("QuickForecaster.Domain.Entities.Estimate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClientId");

                    b.Property<string>("ProjectName");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Estimates");

                    b.HasData(
                        new { Id = 1, ClientId = 1, ProjectName = "Contoso Website" },
                        new { Id = 2, ClientId = 2, ProjectName = "Fabrikam Mobile App" },
                        new { Id = 3, ClientId = 2, ProjectName = "Fabrikam DevOps" }
                    );
                });

            modelBuilder.Entity("QuickForecaster.Domain.Entities.BacklogItem", b =>
                {
                    b.HasOne("QuickForecaster.Domain.Entities.Estimate", "Estimate")
                        .WithMany("BacklogItems")
                        .HasForeignKey("EstimateId");
                });

            modelBuilder.Entity("QuickForecaster.Domain.Entities.Client", b =>
                {
                    b.OwnsOne("QuickForecaster.Domain.ValueObjects.Contact", "AccountManager", b1 =>
                        {
                            b1.Property<int>("ClientId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("DisplayName");

                            b1.Property<string>("Email");

                            b1.ToTable("Clients");

                            b1.HasOne("QuickForecaster.Domain.Entities.Client")
                                .WithOne("AccountManager")
                                .HasForeignKey("QuickForecaster.Domain.ValueObjects.Contact", "ClientId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { ClientId = 1, DisplayName = "John Contoso", Email = "jdoe@contoso.com" },
                                new { ClientId = 2, DisplayName = "John Fabrikam", Email = "jdoe@fabrikam.com" },
                                new { ClientId = 3, DisplayName = "John Wingtip", Email = "jdoe@wingtip.com" },
                                new { ClientId = 4, DisplayName = "John Mydrive", Email = "jdoe@mydrive.com" }
                            );
                        });
                });

            modelBuilder.Entity("QuickForecaster.Domain.Entities.Estimate", b =>
                {
                    b.HasOne("QuickForecaster.Domain.Entities.Client", "Client")
                        .WithMany("Estimates")
                        .HasForeignKey("ClientId");

                    b.OwnsOne("QuickForecaster.Domain.ValueObjects.Contact", "Estimator", b1 =>
                        {
                            b1.Property<int>("EstimateId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("DisplayName");

                            b1.Property<string>("Email");

                            b1.ToTable("Estimates");

                            b1.HasOne("QuickForecaster.Domain.Entities.Estimate")
                                .WithOne("Estimator")
                                .HasForeignKey("QuickForecaster.Domain.ValueObjects.Contact", "EstimateId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.HasData(
                                new { EstimateId = 1, DisplayName = "Jane Contoso", Email = "jane@Contoso.com" },
                                new { EstimateId = 2, DisplayName = "Jane Fabrikam", Email = "jane@fabrikam.com" },
                                new { EstimateId = 3, DisplayName = "Tom Fabrikam", Email = "tom@fabrikam.com" }
                            );
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
